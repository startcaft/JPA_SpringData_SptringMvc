#Log4j的三个重要组件------Loggers,Appenders,Layouts，这三个组件协同的工作
#使得开发者能够依据信息类别和级别去记录信息，并能够在运行期间，控制信息记录的方式以及日志存放的地点。
#
#
#Log4j允许开发人员定义多个Logger，每个Logger拥有自己的名称，Logger之间通过名字来表明隶属关系。
#【有一个Logger称为Root，它是永远存在的，且不能通过名字检索或引用，
# 可以通过Logger.getRootLogger()方法获取，其他Logger通过Logger.getLogger(String name)方法获取】；
#
#Appender则是用来指明讲所有的log信息存放到什么地方，【Log4j中支持多种Appender，
#如console，files，GUI components，Event Loggers等】，一个Logger可以拥有多个Appender，
#意思就是既可以讲Log信息输出到屏幕，同时也可以存储到一个文件中；
#
#Layout的作用则是控制Log信息的输出方式，也就是格式化输出的信息。
#
#Log4j中将要输出的Log信息定义了5种级别，一次是DEBUG,INFO,WARN,ERROR和FATAL，
#【当输出Log时，只有级别配置高过配置文件中定义的几倍的信息才能真正的输出】；
#
#
#配置根Logger，其语法为：log4j.rootLogger = [level1,level2,...],appenderName1,appenderName2,...
#level是日志记录的优先级，它们的优先级是依次降低：
#FATAL
#ERROR
#WARN
#INFO
#DEBUG
#appenderName就是制定日志信息输出到哪个地方，可以通知制定多个输出目的地。(自己取名)
#
#配置日志信息输出目的地Appender，其语法为：
#log4j.appender.appenderName = fully.qualified.name.of.appender.class(log4j定义的Appender类的全类名)
#log4j.appender.appenderName.option1 = value1 
#log4j.appender.appenderName.option = valueN 
#log4j提供的appender有以下集中：
#org.apache.log4j.ConsoleAppender【控制台】;
#org.apache.log4j.FileAppender【文件】;
#org.apache.log4j.DailyRollingFileAppender【每天产生一个日志文件】;
#org.apache.log4j.RollingFileAppender【文件大小到达制定尺寸的时候产生一个新的文件】;
#org.apache.log4j.WriterAppender【讲日志信息以流格式发送到任意制定的地方】;
#
#配置日志信息的Layout(格式)，其语法为：
#log4j.appender.appenderName.layout = fully.qualified.name.of.layout.class(log4j内置的Layout类的全类名)
#log4j.appender.appenderName.layout.option1 = value1  
#log4j.appender.appenderName.layout.option = valueN
#log4j提供的layout有以下几种：
#org.apache.log4j.HTMLLayout【以HTML表格形式布局】;
#org.apache.log4j.PatternLayout【可以灵活地指定布局模式】;
#org.apache.log4j.SimpleLayout【包含日志信息的级别和信息字符串】;
#org.apache.log4j.TTCCLayout【包含日志产生的时间，县城，类别等等信息】;
#
#打印参数：log4j.appender.log.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [ %t ] %m%n
#log4j采用类似C语言中的printf函数的打印格式格式化日志信息，如下：
#%m------输出代码中指定的消息
#%p------输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
#%r------输出自应用启动到输出该log信息耗费的毫秒数
#%c------输出所属的类目，通常就是所在类的全名
#%t------输出产生该日志事件的线程名
#%n------输出一个回车换行符，Windows平台为"/r/n"，Unix平台为"/n"
#%d------输出日志时间的日期或时间。
#默认格式为ISO8601，也可以在其后制定格式，比如：%d{yyyy MM dd HH:mm:ss,SSS}
#输出类似：2015 10 1 22:10:28,921
#%l------输出日志事件的发生位置，包括类目名，发生的线程，以及在代码中的行数。
#
#特别注意以下参数设置：log4j.appender.log.Threshold = ERROR
#它是表示在总控开关的前提，只有达到这个级别的日志才能被记录到这个文件中

log4j.rootLogger=info, stdout, log, errorlog  
log4j.Logger=search,Test  

###Console ###  
log4j.appender.stdout = org.apache.log4j.ConsoleAppender  
log4j.appender.stdout.Target = System.out  
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout  
log4j.appender.stdout.layout.ConversionPattern =  %d{ABSOLUTE} [ %t ] [ %p ]:%L - %m%n  
  
### Log ###    
log4j.appender.log = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.log.File = log/log.log  
log4j.appender.log.Append = true  
log4j.appender.log.Threshold = INFO  
log4j.appender.log.DatePattern='.'yyyy-MM-dd  
log4j.appender.log.layout = org.apache.log4j.PatternLayout  
log4j.appender.log.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [ %t ] %m%n  
  
### Error ###  
log4j.appender.errorlog = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.errorlog.File = log/errorlog.log  
log4j.appender.errorlog.Append = true  
log4j.appender.errorlog.Threshold = ERROR   
log4j.appender.errorlog.DatePattern='.'yyyy-MM-dd  
log4j.appender.errorlog.layout = org.apache.log4j.PatternLayout  
log4j.appender.errorlog.layout.ConversionPattern =%-d{yyyy-MM-dd HH:mm:ss} [ %t ] %m%n  