<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 
	映射文件命名：
	User.xml：ibatis原始的命名方式；
	Mapper代理方式的命名则是:xxxxMapper.xml；
	
	mapper元素的namespace属性，作用就是对SQL进行分化类管理
	注意：如果使用Mapper代理的方式开发，namespace有着特殊的重要的作用。
 -->
<mapper namespace="test">
	
	<!-- 在映射文件中配置很多sql语句 -->
	<!-- 通过select执行数据库查询
		id:表示映射文件中的sql，称之为statement的id
		(将sql语句封装到mappedStatement对象中)
		
		【parameterType:执行输入参数的类型】
		
		#{}:表示一个占位符?
		#{id}:其中的id表示输入参数的名称，【如果parameterType为简单类型，#{}中的参数名可以任意,如果paramterType为POJO，#{}中的参数名为pojo中的属性名】
		
		【resultType:执行输出结果所映射的Java对象类型,select元素制定resultType表示将单条记录映射成的Java对象类型】
	 -->
	<select id="findUserById" parameterType="int" resultType="user">
		select * from user where id = #{value}
	</select>
	
	<!-- 
		${}:表示拼接拼接字符串，将接受到的参数不加任何修饰拼接在sql中;
		使用${}会引起sql注入；
		${value}:如果传入的是简单类型【只能使用value】;
	 -->
	<select id="findUserByName" parameterType="String" resultType="user">
		select * from user where username like '%${value}%'
	</select>
	
	<!-- 
		insert之后返回该条记录的主键：
		1：mysql自增主键如何处理？
			执行完insert语句后，再执行【select LAST_INSERT_ID()】函数即可；
			【在insert语句之后调用】
		2：非自增主键如何处理？
			可以使用mysql的uuid()这个函数，【需要修改表中的id主键的类型为String，长度设置成35】；
			【先通过uuid()查询到一个主键，再讲主键输入到sql语句中】；
			【所以select uuid()的执行顺序要放在insert语句之前执行】；
	 -->
	<insert id="insertUser" parameterType="user">
		<!-- 
			将插入数据的主键返回，返回到selectKey元素的keyProperty="属性名"指定的属性。
			
			select LAST_INSERT_ID():得到刚刚insert进去的记录的主键值，只适用于自增主键；
			
			order属性：代表select LAST_INSERT_ID()这段查询的执行顺序，相对于insert语句的执行顺序，这里是after
			也就是执行完insert语句之后再执行select LAST_INSERT_ID()；
			
			resultType属性：指定select LAST_INSERT_ID()的结果类型
		 -->
		<selectKey keyProperty="id" order="AFTER" resultType="int">
			select LAST_INSERT_ID()
		</selectKey>
		insert into user(username,birthday,sex,address)
			value(#{username},#{birthday},#{sex},#{address})
	</insert>
	
	<!-- 非新增主键insert后返回主键值
	<insert id="insertUser" parameterType="user">
		<selectKey keyProperty="id" order="BEFORE" resultType="String">
			select uuid()
		</selectKey>
		insert into user(id,username,birthday,sex,address)
			value(#{id},#{username},#{birthday},#{sex},#{address})
	</insert>
	-->
	
	<delete id="deleteUser" parameterType="java.lang.Integer">
		delete from user where id = #{value}
	</delete>
	
	<update id="updateUser" parameterType="user">
		update user set 
			username=#{username},address=#{address},birthday=#{birthday},sex=#{sex}
			where id=#{id}
	</update>
		
</mapper>